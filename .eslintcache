[{"D:\\CodeProjects\\AlgoGraph\\algograph\\src\\index.js":"1","D:\\CodeProjects\\AlgoGraph\\algograph\\src\\App.js":"2","D:\\CodeProjects\\AlgoGraph\\algograph\\src\\reportWebVitals.js":"3","D:\\CodeProjects\\AlgoGraph\\algograph\\src\\components\\BodyContent.js":"4","D:\\CodeProjects\\AlgoGraph\\algograph\\src\\components\\d3\\BarGraph.js":"5","D:\\CodeProjects\\AlgoGraph\\algograph\\src\\hooks\\useD3.js":"6","D:\\CodeProjects\\AlgoGraph\\algograph\\src\\themes.js":"7","D:\\CodeProjects\\AlgoGraph\\algograph\\src\\hooks\\useInterval.js":"8"},{"size":500,"mtime":1606166773035,"results":"9","hashOfConfig":"10"},{"size":621,"mtime":1612943612050,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1606166773035,"results":"12","hashOfConfig":"10"},{"size":12692,"mtime":1612943777335,"results":"13","hashOfConfig":"10"},{"size":6517,"mtime":1612776644710,"results":"14","hashOfConfig":"10"},{"size":302,"mtime":1612041225236,"results":"15","hashOfConfig":"10"},{"size":1576,"mtime":1612509199580,"results":"16","hashOfConfig":"10"},{"size":475,"mtime":1612815583898,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"2807hf",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"D:\\CodeProjects\\AlgoGraph\\algograph\\src\\index.js",[],["38","39"],"D:\\CodeProjects\\AlgoGraph\\algograph\\src\\App.js",[],"D:\\CodeProjects\\AlgoGraph\\algograph\\src\\reportWebVitals.js",[],"D:\\CodeProjects\\AlgoGraph\\algograph\\src\\components\\BodyContent.js",["40"],"import React, { useState, useRef } from 'react';\r\nimport { BarGraph } from './d3/BarGraph';\r\nimport { Button, IconButton, AppBar, Toolbar, Dialog, DialogTitle, DialogActions, DialogContent, Menu, MenuItem, Slider, Switch, FormControlLabel, Typography, Grid, Tooltip } from '@material-ui/core'\r\nimport TuneIcon from '@material-ui/icons/Tune';\r\nimport BarChartIcon from '@material-ui/icons/BarChart';\r\nimport ColorLensIcon from '@material-ui/icons/ColorLens';\r\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\r\nimport PauseCircleFilledIcon from '@material-ui/icons/PauseCircleFilled';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { useInterval } from '../hooks/useInterval';\r\n\r\nconst randomData = (range, count) => {\r\n  let len = count;\r\n  return [...Array(len).keys()].map((num) => {\r\n    return Math.floor(Math.random() * (range[1] - range[0] + 1)) + range[0];\r\n  });\r\n}\r\n\r\nconst sortParam = {\r\n  insertion: {\r\n    pos: 1,\r\n    ind: 1,\r\n    step: 1,\r\n    completed: false,\r\n  },\r\n  selection: {\r\n    pos: 0,\r\n    posSmall: 0,\r\n    ind: 0,\r\n    step: 1,\r\n    completed: false,\r\n  },\r\n  bubble: {\r\n    pos: 0,\r\n    step: 1,\r\n    sorted: 0,\r\n    changes: false,\r\n    completed: false,\r\n  }\r\n}\r\n\r\nconst insertionStep = (arr, param) => {\r\n  if ((param.pos - param.step > -1  && param.pos - param.step < arr.length) && arr[param.pos] < arr[param.pos - param.step]) {\r\n    let copy = arr[param.pos - param.step];\r\n    arr[param.pos - param.step] = arr[param.pos];\r\n    arr[param.pos] = copy;\r\n    param.pos = param.pos - param.step;\r\n  }\r\n  else {\r\n    param.ind = param.ind + param.step;\r\n    param.pos = param.ind;\r\n  }\r\n  if ((param.ind >= arr.length && param.step === 1) || (param.ind < 0 && param.step === -1)) {\r\n    param.completed = true;\r\n  }\r\n  return {arr, param};\r\n}\r\n\r\nconst selectionStep = (arr, param) => {\r\n  if (param.pos < arr.length && param.pos > -1) {  \r\n    if (arr[param.pos] < arr[param.posSmall]) {\r\n      param.posSmall = param.pos;\r\n    }\r\n    param.pos = param.pos + param.step;\r\n  }\r\n  else {\r\n    let copy = arr[param.ind];\r\n    arr[param.ind] = arr[param.posSmall];\r\n    arr[param.posSmall] = copy;\r\n    param.ind = param.ind + param.step;\r\n    param.posSmall = param.ind;\r\n    param.pos = param.ind;\r\n  }\r\n  if ((param.ind >= arr.length - 1 && param.step === 1) || (param.ind <= 0 && param.step === -1)) {\r\n    param.completed = true;\r\n  }\r\n  return {arr, param};\r\n}\r\n\r\nconst bubbleStep = (arr, param) => {\r\n  if ((param.pos < arr.length - 1 - param.sorted && param.step === 1) || (param.pos > 0 + param.sorted && param.step === -1)) {\r\n    if (arr[param.pos + param.step] <arr[param.pos]) {\r\n      param.changes = true;\r\n      let copy = arr[param.pos + param.step];\r\n      arr[param.pos + param.step] = arr[param.pos];\r\n      arr[param.pos] = copy;\r\n    }\r\n    param.pos += param.step;\r\n  }\r\n  else {\r\n    if (param.changes) {\r\n      param.sorted += 1;\r\n      param.pos = (param.step === 1) ? 0 : arr.length - 1;\r\n      param.changes = false;\r\n    }\r\n    else {\r\n      param.completed = true;\r\n    }\r\n  }\r\n  return {arr, param};\r\n}\r\n\r\nconst sortStep = {\r\n  insertion: (arr, param) => {return insertionStep(arr, param)},\r\n  selection: (arr, param) => {return selectionStep(arr, param)},\r\n  bubble: (arr, param) => {return bubbleStep(arr, param)},\r\n}\r\n\r\nconst callSortStep = (arr, param, sortType) => {\r\n  return (sortStep[sortType])(arr, param);\r\n}\r\n\r\nconst SettingsDialog = ({defSpeed, defOrder, isOpen, handleClose, handleConfirm}) => {\r\n\r\n  const [speed, setSpeed] = useState(defSpeed);\r\n  const [order, setOrder] = useState(defOrder);\r\n\r\n  const marks = [\r\n    {\r\n      value: 100,\r\n      label: \".1 sec\",\r\n    },\r\n    {\r\n      value: 1000,\r\n      label: \"1 sec\",\r\n    }\r\n  ]\r\n\r\n  const close = () => {\r\n    setSpeed(defSpeed);\r\n    setOrder(defOrder);\r\n    handleClose();\r\n  }\r\n\r\n\r\n  return (\r\n    <Dialog open={isOpen} onClose={close}>\r\n      <DialogTitle>Settings</DialogTitle>\r\n      <DialogContent>\r\n        <Typography gutterBottom>Sorting Order</Typography>\r\n        <FormControlLabel\r\n          control={<Switch color=\"primary\" checked={order} onChange={(event) => {setOrder(event.target.checked)}}></Switch>}\r\n          label={order ? \"Ascending\" : \"Descending\"}\r\n        />\r\n        <Typography gutterBottom>Sorting Interval</Typography>\r\n        <Slider defaultValue={defSpeed} value={speed} min={100} max={1000} onChange={(event, newValue) => { setSpeed(newValue) }} scale={(x) => {return x / 1000}} marks={marks} valueLabelDisplay=\"auto\"/>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={close}>Cancel</Button>\r\n\t\t\t\t<Button onClick={() => { handleConfirm(speed, order) }}>Confirm</Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nconst NumberDialog = ({ defRange, defCount, isOpen, handleClose, handleConfirm }) => {\r\n\r\n\tconst [range, setRange] = useState(defRange);\r\n\tconst [count, setCount] = useState(defCount);\r\n\r\n\tconst close = () => {\r\n\t\tsetRange(defRange);\r\n\t\tsetCount(defCount);\r\n\t\thandleClose();\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Dialog open={isOpen} onClose={close}>\r\n\t\t\t<DialogTitle>Number Generation Settings</DialogTitle>\r\n\t\t\t<DialogContent>\r\n\t\t\t\t<Typography gutterBottom>Range</Typography>\r\n\t\t\t\t<Slider defaultValue={defRange} value={range} min={0} max={50} onChange={(event, newValue) => { setRange(newValue) }} valueLabelDisplay=\"auto\" />\r\n\t\t\t\t<Typography gutterBottom>Count</Typography>\r\n\t\t\t\t<Slider defaultValue={defCount} value={count} min={2} max={40} onChange={(event, newValue) => { setCount(newValue) }} valueLabelDisplay=\"auto\" />\r\n\t\t\t</DialogContent>\r\n\t\t\t<DialogActions>\r\n\t\t\t\t<Button onClick={close}>Cancel</Button>\r\n\t\t\t\t<Button onClick={() => { handleConfirm(range, count) }}>Confirm</Button>\r\n\t\t\t</DialogActions>\r\n\t\t</Dialog>\r\n\t)\r\n}\r\nconst StyleDialog = ({styles, setStyle, isOpen, handleClose}) => {\r\n\treturn (\r\n\t\t<Dialog open={isOpen} onClose={() => {handleClose()}}>\r\n\t\t\t<DialogTitle>Themes</DialogTitle>\r\n\t\t\t<DialogContent>\r\n\t\t\t\t{Object.keys(styles).map((styleName) => {\r\n\t\t\t\t\treturn (<Button key={styleName} onClick={() => {setStyle(styleName)}}>{styleName}</Button>)\r\n\t\t\t\t})}\r\n\t\t\t</DialogContent>\r\n\t\t</Dialog>\r\n\t)\r\n}\r\nconst BodyContent = ({styles, setStyle}) => {\r\n\tconst [dummyData, setDummy] = useState([16, 4, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 13]);\r\n\tconst [range, setRange] = useState([0, 16]);\r\n\tconst [count, setCount] = useState(15)\r\n\tconst [numDialogOpen, setNumDialog] = useState(false);\r\n  const [styleDialogOpen, setStyleDialog] = useState(false);\r\n  const [settingsDialogOpen, setSettingsDialog] = useState(false);\r\n  const [sortMenuAnchor, setSortMenu] = useState(null);\r\n  const [sortType, setSortType] = useState(\"insertion\");\r\n  const [sortIndex, setSortIndex] = useState(0);\r\n  const [tick, setTick] = useState(0);\r\n  const [tickSpeed, setTickSpeed] = useState(100);\r\n  const [order, setOrder] = useState(true);\r\n\r\n  const originalData = useRef([...dummyData]);\r\n  const sortInfo = useRef({...(sortParam.insertion)});\r\n  const highlightedPos = useRef(null);\r\n\r\n\tconst theme = useTheme();\r\n\tconsole.log(theme);\r\n\r\n\tconst setNumbers = (newRange, newCount) => {\r\n\t\tsetNumDialog(false);\r\n\t\tsetRange(newRange);\r\n\t\tsetCount(newCount);\r\n\t}\r\n\r\n  const setSettings = (newSpeed, newOrder) => {\r\n    setSettingsDialog(false);\r\n    if (order !== newOrder ) {\r\n      resetInterval(undefined, newOrder);\r\n      setDummy(originalData.current);\r\n      setOrder(newOrder);\r\n    }\r\n    setTickSpeed(newSpeed);\r\n    if (order === newOrder && tick !== 0) {\r\n      setTick(newSpeed);\r\n    }\r\n  }\r\n\r\n  const startInterval = () => {\r\n    if (!sortInfo.current.completed) {\r\n      highlightedPos.current = sortInfo.current.pos;\r\n      setTick(tickSpeed);\r\n    }\r\n  }\r\n\r\n  const resetInterval = (newInfo={...(sortParam[sortType])}, ord=order, data=originalData.current) => {\r\n    setTick(0);\r\n    if (!ord) {\r\n      let specials = [\"pos\", \"posSmall\", \"ind\"]\r\n      Object.keys(newInfo).forEach((key) => {\r\n        if (specials.includes(key)) {\r\n          newInfo[key] = data.length - newInfo[key] - 1;\r\n        }\r\n        else if (key === \"step\") {\r\n          newInfo[key] = newInfo[key] * -1;\r\n        }\r\n      });\r\n      console.log(newInfo);\r\n    }\r\n    sortInfo.current = newInfo;\r\n    highlightedPos.current = null;\r\n  }\r\n\r\n  useInterval(() => {\r\n    if (!sortInfo.current.completed) {\r\n      let result = callSortStep([...dummyData], sortInfo.current, sortType);\r\n      sortInfo.current = result.param;\r\n      highlightedPos.current = sortInfo.current.pos;\r\n      setDummy(result.arr);\r\n    }\r\n    else {\r\n      highlightedPos.current = null;\r\n      setTick(0);\r\n    }\r\n  }, tick);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<AppBar position=\"fixed\">\r\n\t\t\t\t<Toolbar>\r\n          <Tooltip title=\"Sorts\">\r\n            <IconButton color=\"inherit\" onClick={(event) => { setSortMenu(event.currentTarget) }}>\r\n              <BarChartIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n          <Menu \r\n            keepmounted open={Boolean(sortMenuAnchor)} \r\n            anchorEl={sortMenuAnchor}\r\n            onClose={() => { setSortMenu(null) }}\r\n          >\r\n            {Object.keys(sortParam).map((sort, index) => {\r\n              return (\r\n                <MenuItem key={sort} selected={index === sortIndex} onClick={() => { resetInterval({...(sortParam[sort])}); setSortType(sort); setSortIndex(index); setDummy(originalData.current) }}>\r\n                  {sort}\r\n                </MenuItem>\r\n              )\r\n            })}\r\n          </Menu>\r\n          <Tooltip title=\"Number Generation Settings\">\r\n            <IconButton color=\"inherit\" onClick={() => { setNumDialog(true) }}>\r\n              <TuneIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n          <Tooltip title=\"Themes\">\r\n            <IconButton color=\"inherit\" onClick={() => { setStyleDialog(true) }}>\r\n              <ColorLensIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n          <Tooltip title=\"Settings\">\r\n            <IconButton color=\"inherit\" onClick={() => { setSettingsDialog(true)}}>\r\n              <SettingsIcon/>\r\n            </IconButton>\r\n          </Tooltip>\r\n\t\t\t\t</Toolbar>\r\n\t\t\t</AppBar>\r\n\t\t\t<Toolbar />\r\n\t\t\t<Grid container direction=\"row\" justify=\"space-evenly\" alignItems=\"center\" spacing={1}>\r\n\t\t\t\t<Grid item>\r\n\t\t\t\t\t<Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" spacing={1}>\r\n\t\t\t\t\t\t<Grid item>\r\n              <Button onClick={() => { let newData = randomData(range, count); resetInterval(); setDummy(newData); originalData.current = [...newData] }} variant=\"contained\" color=\"primary\">Randomize</Button>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t\t<Button onClick={() => { let newData = [...dummyData]; resetInterval(...Array(2),newData); setDummy(newData.sort(order ? (a, b) => a - b : (a, b) => b - a)); sortInfo.current.completed = true }} variant=\"contained\" color=\"primary\">Finish Sort</Button>\r\n\t\t\t\t\t\t</Grid>\r\n            <Grid item>\r\n\t\t\t\t\t\t\t<Button onClick={() => { resetInterval(); setDummy(originalData.current)}} variant=\"contained\" color=\"primary\">Reset Sort</Button>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item>\r\n              <Tooltip title={(tick === 0) ? (\"Play Sort\") : (\"Pause Sort\")}>\r\n                <IconButton onClick={() => {(tick === 0) ? (startInterval()) : (setTick(0))}} color=\"primary\">\r\n                  {(tick === 0) ? <PlayCircleFilledIcon/> : <PauseCircleFilledIcon/>}\r\n                </IconButton>\r\n              </Tooltip>\r\n\t\t\t\t\t\t</Grid>\t\t\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid item>\r\n\t\t\t\t\t<BarGraph\r\n\t\t\t\t\t\tdata={dummyData} colors={{ axis: theme.palette.primary.main, bar: theme.palette.primary.main, highlight: theme.palette.primary.light }} highlightedPos = {highlightedPos.current} animSpeed = {tickSpeed * .75}/>\r\n\t\t\t\t</Grid>\r\n        <Grid item>\r\n          <Grid container container direction=\"column\" justify=\"center\" alignItems=\"center\" spacing={1}>\r\n            <Grid item>\r\n              <Typography variant=\"h1\">Insertion</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Typography variant=\"body1\">This is insertion</Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n\t\t\t</Grid>\r\n\t\t\t<NumberDialog defRange={range} defCount={count} isOpen={numDialogOpen} handleClose={() => { setNumDialog(false) }} handleConfirm={setNumbers} />\r\n\t\t\t<StyleDialog styles={styles} setStyle={(styleName) => {setStyle(styleName)}} isOpen={styleDialogOpen} handleClose={() => { setStyleDialog(false)}}/>\r\n      <SettingsDialog defSpeed={tickSpeed} defOrder={order} isOpen={settingsDialogOpen} handleClose={() => { setSettingsDialog(false) }} handleConfirm={setSettings}/>\r\n\t\t</>\r\n\t) \r\n}\r\n\r\nexport default BodyContent;","D:\\CodeProjects\\AlgoGraph\\algograph\\src\\components\\d3\\BarGraph.js",[],"D:\\CodeProjects\\AlgoGraph\\algograph\\src\\hooks\\useD3.js",["41","42"],"import {useEffect, useRef} from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst useD3 = (graphFn, dependencies) => {\r\n    const d3Ref = useRef();\r\n\r\n    useEffect(() => {\r\n        graphFn(d3.select(d3Ref.current));\r\n        return () => {};\r\n    }, dependencies);\r\n\r\n    return d3Ref;\r\n} \r\nexport {useD3};",["43","44"],"D:\\CodeProjects\\AlgoGraph\\algograph\\src\\themes.js",[],"D:\\CodeProjects\\AlgoGraph\\algograph\\src\\hooks\\useInterval.js",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":340,"column":27,"nodeType":"51","endLine":340,"endColumn":36},{"ruleId":"52","severity":1,"message":"53","line":10,"column":8,"nodeType":"54","endLine":10,"endColumn":20},{"ruleId":"52","severity":1,"message":"55","line":10,"column":8,"nodeType":"54","endLine":10,"endColumn":20,"suggestions":"56"},{"ruleId":"45","replacedBy":"57"},{"ruleId":"47","replacedBy":"58"},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","react-hooks/exhaustive-deps","React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","Identifier","React Hook useEffect has a missing dependency: 'graphFn'. Either include it or remove the dependency array. If 'graphFn' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["61"],["59"],["60"],"no-global-assign","no-unsafe-negation",{"desc":"62","fix":"63"},"Update the dependencies array to be: [graphFn]",{"range":"64","text":"65"},[246,258],"[graphFn]"]